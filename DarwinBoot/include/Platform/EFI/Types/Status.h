// Copyright (C) 2024-2025 Zormeister, All rights reserved. Licensed under the BSD-3 Clause License.

#pragma once
#include <CoreDarwinBoot/CDBBasicTypes.h>

#if __x86_64__ || __arm64__
typedef UInt64 EFI_STATUS;
#else
typedef UInt32 EFI_STATUS;
#endif

#if __x86_64__ || __arm64__
    #define EFI_HIGH_BIT (0x80000000000000)
#else
    #define EFI_HIGH_BIT (0x80000000)
#endif

#define EFI_ERROR(code) (EFI_HIGH_BIT | (code))

enum EFI_STATUS_CODES {
    EFI_SUCCESS = 0,
    EFI_LOAD_ERROR = EFI_ERROR(1),
    EFI_INVALID_PARAMETER = EFI_ERROR(2),
    EFI_UNSUPPORTED = EFI_ERROR(3),
    EFI_BAD_BUFFER_SIZE = EFI_ERROR(4),
    EFI_BUFFER_TOO_SMALL = EFI_ERROR(5),
    EFI_NOT_READY = EFI_ERROR(6),
    EFI_DEVICE_ERROR = EFI_ERROR(7),
    EFI_WRITE_PROTECTED = EFI_ERROR(8),
    EFI_OUT_OF_RESOURCES = EFI_ERROR(9),
    EFI_VOLUME_CORRUPTED = EFI_ERROR(10),
    EFI_VOLUME_FULL = EFI_ERROR(11),
    EFI_NO_MEDIA = EFI_ERROR(12),
    EFI_MEDIA_CHANGED = EFI_ERROR(13),
    EFI_NOT_FOUND = EFI_ERROR(14),
    EFI_ACCESS_DENIED = EFI_ERROR(15),
    EFI_NO_RESPONSE = EFI_ERROR(16),
    EFI_NO_MAPPING = EFI_ERROR(17),
    EFI_TIMEOUT = EFI_ERROR(18),
    EFI_NOT_STARTED = EFI_ERROR(19),
    EFI_ALREADY_STARTED = EFI_ERROR(20),
    EFI_ABORTED = EFI_ERROR(21),
    EFI_ICMP_ERROR = EFI_ERROR(22),
    EFI_TFTP_ERROR = EFI_ERROR(23),
    EFI_PROTOCOL_ERROR = EFI_ERROR(24),
    EFI_INCOMPATIBLE_VERSION = EFI_ERROR(25),
    EFI_SECURITY_VIOLATION = EFI_ERROR(26),
    EFI_CRC_ERROR = EFI_ERROR(27),
    EFI_END_OF_MEDIA = EFI_ERROR(28),
    EFI_END_OF_FILE = EFI_ERROR(31),
    EFI_INVALID_LANGUAGE = EFI_ERROR(32),
    EFI_COMPROMISED_DATA = EFI_ERROR(33),
    EFI_IP_ADDRESS_CONFLICT = EFI_ERROR(34),
    EFI_HTTP_ERROR = EFI_ERROR(35),
    EFI_WARN_UNKNOWN_GLYPH = 1,
    EFI_WARN_DELETE_FAILURE = 2,
    EFI_WARN_WRITE_FAILURE = 3,
    EFI_WARN_BUFFER_TOO_SMALL = 4,
    EFI_WARN_STALE_DATA = 5,
    EFI_WARN_FILE_SYSTEM = 6,
    EFI_WARN_RESET_REQUIRED = 7,
};
